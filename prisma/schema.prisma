// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id                      Int           @id @default(autoincrement())
  name                    String        @db.VarChar(255)
  phone                   String        @db.VarChar(255)
  email                   String        @db.VarChar(255)
  role                    role //role
  gender                  gender //gender
  date_of_birth           DateTime      @db.Date
  avatar_url              String        @db.VarChar(255)
  access_token            String        @db.VarChar(255)
  refresh_token           String        @db.VarChar(255)
  access_token_expiration DateTime
  created_at              DateTime      @default(now())
  addresses               UserAddress[]
  comments                comments[]
  stores                  Store[] //Store[]
  orders                  Order[] //Order[]
}

enum role{
  SELLER
  CONSUMER
}

enum gender{
    FEMALE
    MALE
    OTHER
}


model UserAddress {
  id                Int      @id @default(autoincrement())
  user_id           Int
  postal_code       Int
  state             String   @db.VarChar(255)
  delegation        String   @db.VarChar(255)
  neighborhood      String   @db.VarChar(255)
  street            String   @db.VarChar(255)
  apartment_number  Int
  street_number     Int
  recipients_name   String   @db.VarChar(255)
  references        String   @db.VarChar(255)
  user              User     @relation(fields: [user_id], references: [id])
}


model Store {
  id                    Int         @id @default(autoincrement())
  owner_user_id         Int
  business_name         String      @db.VarChar(255)
  name_store_manager    String      @db.VarChar(255)
  avatar_url            String      @db.VarChar(255)
  store_email           String      @db.VarChar(255)
  description           String      @db.VarChar(255)
  address               String      @db.VarChar(255)
  stripe_account_id     String      @db.VarChar(255)
  social_media          String      @db.VarChar(255)
  account_number        String      @db.VarChar(255)
  store_number          String      @db.VarChar(255)
  products              Product[]
  orders                Order[] //Order[]
  owner_user            User        @relation(fields: [owner_user_id], references: [id])
}


model Product {
  id                    Int                     @id @default(autoincrement())
  store_id              Int
  category_id           Int                  
  stock                 Int
  name                  String                  @db.VarChar(255)
  price                 Float
  thumbnail_url         String                  @db.VarChar(255)
  description           String                  @db.VarChar(255)
  color                 String                  @db.VarChar(255)
  comments              comments[]
  rel_order_products    rel_order_products[]
  store                 Store                   @relation(fields: [store_id], references: [id])
  category             Category                @relation(fields: [category_id], references: [id])
}


model Category {
  id                Int         @id @default(autoincrement())
  thumbnail_url     String      @db.VarChar(255)
  description       String      @db.VarChar(255)
  products          Product[]
}


model Order {
  id                    Int                     @id @default(autoincrement())
  user_id               Int
  store_id              Int
  order_date            DateTime                @default(now())
  quantity              Int
  total_price           Float
  ship_address          String                  @db.VarChar(255)
  shipping_cost         Float
  status                status //status
  rel_order_products    rel_order_products[]
  user                  User                    @relation(fields: [user_id], references: [id])
  store                 Store                   @relation(fields: [store_id], references: [id])
}

enum status{
    CART
    PAID
    SHIPPING
    FULFILLED
}


model rel_order_products {
  id           Int      @id @default(autoincrement())
  order_id     Int
  product_id   Int
  order        Order    @relation(fields: [order_id], references: [id])
  product      Product  @relation(fields: [product_id], references: [id])
}


model comments {
  id                Int          @id @default(autoincrement())
  user_id           Int
  product_id        Int
  feedback          String       @db.VarChar(255)
  rating            Float
  thumbnail_url     String       @db.VarChar(255)
  comment_date      DateTime     @default(now())
  user              User         @relation(fields: [user_id], references: [id])
  product           Product      @relation(fields: [product_id], references: [id])
}
